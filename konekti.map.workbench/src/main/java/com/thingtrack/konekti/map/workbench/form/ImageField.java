package com.thingtrack.konekti.map.workbench.form;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;

import org.vaadin.addon.customfield.CustomField;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.CssLayout;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.Upload;
import com.vaadin.ui.Upload.Receiver;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class ImageField extends CustomField {
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Upload upImage;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	private final static String EMPTY_IMAGE = "drag_and_drop.jpg";
	
	private LineBreakCounter counter = new LineBreakCounter();
	private CssLayout dropPane;
	private File file;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ImageField() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		upImage.setReceiver(counter);
		
        dropPane = new CssLayout();
        dropPane.setWidth("100px");
        dropPane.setHeight("100px");
        dropPane.addStyleName("image-drop-pane");
                
        mainLayout.addComponent(dropPane);
	}

	@Override
	public void setPropertyDataSource(Property newDataSource) {
		String resourceName = (String)newDataSource.getValue();
			
		dropPane.removeAllComponents();
		
		if (resourceName != null)
			dropPane.addComponent(new Embedded("", new ThemeResource("../konektimap/cards/" + resourceName)));
		else
			dropPane.addComponent(new Embedded("", new ThemeResource("../konektimap/cards/" + EMPTY_IMAGE)));
		
		super.setPropertyDataSource(newDataSource);
	}
	
	@Override
	public Object getValue() {		
		return counter.getFileName();
		
	}
	
	@Override
	public Class<?> getType() {
		return String.class;
		
	}
	
	public class LineBreakCounter implements Receiver {
        private String fileName;
        private String mtype;
        private int counter;

        /**
         * return an OutputStream that simply counts lineends
         */
        public OutputStream receiveUpload(String filename, String MIMEType) {
            counter = 0;
            fileName = filename;
            mtype = MIMEType;
            return new OutputStream() {
                private static final int searchedByte = '\n';

                @Override
                public void write(int b) throws IOException {
                    if (b == searchedByte) {
                        counter++;
                    }
                }
            };
        }

        public String getFileName() {
            return fileName;
        }

        public String getMimeType() {
            return mtype;
        }

        public int getLineBreakCount() {
            return counter;
        }

    }
	 
    
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("360px");
		mainLayout.setHeight("129px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("360px");
		setHeight("129px");
		
		// upImage
		upImage = new Upload();
		upImage.setImmediate(false);
		upImage.setWidth("100.0%");
		upImage.setHeight("-1px");
		mainLayout.addComponent(upImage);
		
		return mainLayout;
	}
	
	@Override
	public void attach() {
		// TODO Auto-generated method stub
		super.attach();
	}

}
