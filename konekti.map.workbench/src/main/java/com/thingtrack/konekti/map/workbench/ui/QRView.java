package com.thingtrack.konekti.map.workbench.ui;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;

import javax.imageio.ImageIO;

import org.krysalis.barcode4j.impl.qr.QRCodeBean;
import org.krysalis.barcode4j.output.bitmap.BitmapCanvasProvider;

import com.thingtrack.konekti.map.domain.Map;
import com.thingtrack.konekti.map.workbench.MainApplication;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.terminal.StreamResource;
import com.vaadin.terminal.StreamResource.StreamSource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;

@SuppressWarnings("serial")
public class QRView extends CustomComponent implements ValueChangeListener {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Embedded qrURI;
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public QRView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	private void buildBarcode(String uri) {
		QRCodeBean beanQr = new QRCodeBean();
		
		final int dpi = 200;
		
		BitmapCanvasProvider canvasQr = new BitmapCanvasProvider(dpi, 1, false, 0);
		        
        //Generate the Qr
        beanQr.generateBarcode(canvasQr, uri);
        
        //Signal end of generation
        try {
			canvasQr.finish();
		} catch (IOException e) {
			e.printStackTrace();
		}
        
        ByteArrayOutputStream baosQr = new ByteArrayOutputStream();
        try {
			ImageIO.write(canvasQr.getBufferedImage(), "png", baosQr);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
        byte[] bytesOutQr = baosQr.toByteArray();
        
        // WAY 01
        //image_1 = new Image(bytesOutQr,false);
        
        // WAY 02
        qrURI.setSource(getImageCoupon("uri", bytesOutQr));
        
    }
		
    private StreamResource getImageCoupon(String name, final byte[] byteResource) {
    	if (byteResource == null)
    		return null;
    	
    	// create an instance of our stream source.
    	StreamSource imagesource = new ModuleResource(byteResource);
    	
    	// Create a resource that uses the stream source and give it a name.
    	// The constructor will automatically register the resource in the application.
    	StreamResource imageresource = new StreamResource(imagesource, "_coupon.png", getApplication());
    	
        return imageresource;
    }

    private class ModuleResource implements StreamResource.StreamSource {
    	private byte[] resource = null;
    	private ByteArrayOutputStream imagebuffer = null;
   	
    	public ModuleResource(byte[] resource) {
    		this.resource = resource;
   		
    	}
   	
		@Override
		public InputStream getStream() {
			if (resource != null) {
				InputStream in = new ByteArrayInputStream(resource);
				BufferedImage bImageFromConvert = null;
	       	
				try {
					bImageFromConvert = ImageIO.read(in);					
					imagebuffer = new ByteArrayOutputStream();
					
					ImageIO.write(bImageFromConvert, "png", imagebuffer);
					} catch (IOException e) {	
						e.printStackTrace();
						
					}
	               
	               return new ByteArrayInputStream(imagebuffer.toByteArray());
	           }
	           
	           return null;
			}
	   	
   	}
   
    private void buildBarcodeCouponCardLayout(Map map) {		
		// build uri konekti map
		String uri = "http://localhost:8080/konekti.map.mobile?user=" + MainApplication.get().getMapUser().getUserId() + "&map=" + map.getMapId() + "&card=" + map.getMode();
			   
	    // create QR code
		buildBarcode(uri);
		
    }
   
	@Override
	public void attach() {
		   Map map = MainApplication.get().getMap();
		   
		   if (map ==  null)
				return;
		   
		   buildBarcodeCouponCardLayout(map);
		   
	}
	
    @Override
    public void valueChange(ValueChangeEvent event) {
		Map map = (Map) event.getProperty().getValue();
		
		if (map ==  null)
			return;
		
		buildBarcodeCouponCardLayout(map);
				
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// qrURI
		qrURI = new Embedded();
		qrURI.setWidth("200px");
		qrURI.setHeight("200px");
		mainLayout.addComponent(qrURI, "top:40.0px;left:40.0px;");
		
		return mainLayout;
	}
}
